name: "Web Application - Dev"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform - Dev"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform - Dev
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format - Dev
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: "./env/web-application/"

      - name: Terraform Init - Dev
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Workspace Create - Dev
        run: terraform workspace new dev

      - name: Terraform Plan - Dev
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -var-file="dev.tfvars" -no-color
        continue-on-error: true
        working-directory: "./env/web-application/main/"
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}    

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status - Dev
        if: steps.plan.outcome == 'failure'
        run: exit 1
    
      - name: Terraform Show - Dev
        run: terraform show -json tfplan.binary > plan.json
        working-directory: "./env/web-application/main/"

      - name: Setup Infracost - Dev
        uses: infracost/actions/setup@v1
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON - Dev
        run: infracost breakdown --path plan.json --format json --out-file /tmp/infracost.json
        working-directory: "./env/web-application/main/"

      - name: Post Infracost comment - Dev
        uses: infracost/actions/comment@v1
        with:
          path: /tmp/infracost.json
          behavior: update 

      - name: Terraform Apply - Dev
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform destroy -var-file="dev.tfvars" -auto-approve
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
